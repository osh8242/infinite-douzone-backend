<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.douzone.rest.saallowpay.dao.SaAllowPayMapper">

    <!-- 급여리스트 -->
    <select id="getSalAlLowPayListByEmp" parameterType="java.util.Map" resultType="SaAllowPay">
        SELECT CD_ALLOW,
            NM_ALLOW,
            SAL_DIVISION,
            MIN(YN_TAX) AS YN_TAX,
            SUM(ALLOW_PAY) AS ALLOW_PAY
        FROM (
            SELECT s.CD_ALLOW,
                s.NM_ALLOW,
                CASE WHEN i.YN_UNIT = 'Y' AND s.CD_ALLOW = 'OVERTIME_PAY' THEN 'N' ELSE s.YN_TAX END AS YN_TAX,
                s.SAL_DIVISION,
                p.ALLOW_PAY,
                s."ORDER"
            FROM SAALLOW s
                LEFT OUTER JOIN SAEMPINFO i ON i.CD_EMP = #{cdEmp}
                LEFT OUTER JOIN SAALLOWPAY p ON p.CD_ALLOW = s.CD_ALLOW AND p.YN_TAX = s.YN_TAX AND p.CD_EMP = #{cdEmp} AND p.DATE_ID = #{dateId}
        ORDER BY CASE WHEN s.YN_TAX = 'N' THEN 0 ELSE 1 END, s."ORDER"
            ) a
        GROUP BY CD_ALLOW, NM_ALLOW, SAL_DIVISION
    </select>

    <!-- 급여자료 입력 -->
    <update id="mergeSalAllowPay" parameterType="list">
        MERGE INTO SAALLOWPAY target
        USING (
        <foreach collection="list" item="item" separator="UNION ALL">
            SELECT #{item.cdAllow} AS CD_ALLOW,
                    #{item.cdEmp} AS CD_EMP,
                    #{item.dateId} AS DATE_ID,
                    #{item.allowPay} AS ALLOW_PAY,
                    #{item.ynTax} AS YN_TAX
            FROM dual
        </foreach>
        ) source
        ON (target.CD_ALLOW = source.CD_ALLOW
            AND target.CD_EMP = source.CD_EMP
            AND target.DATE_ID = source.DATE_ID
            AND target.YN_TAX = source.YN_TAX
            )
        WHEN MATCHED THEN
            UPDATE SET target.ALLOW_PAY = source.ALLOW_PAY
        WHEN NOT MATCHED THEN
            INSERT (CD_ALLOW, CD_EMP, DATE_ID, ALLOW_PAY , YN_TAX)
            VALUES (source.CD_ALLOW, source.CD_EMP, source.DATE_ID, source.ALLOW_PAY , source.YN_TAX)
    </update>


    <!-- 급여자료 수정 -->
    <update id="updateSalAllowPay" parameterType="java.util.Map">
        UPDATE SAALLOWPAY
            SET ALLOW_PAY = #{allowPay}
        WHERE CD_EMP = #{cdEmp}
            AND CD_ALLOW = #{cdAllow}
            AND DATE_ID = #{dateId}
    </update>

    <!-- 합계 데이터 조회-->
    <select id="getSalAllowPaySum" parameterType="java.util.Map" resultType="map">
        SELECT
            a.CD_ALLOW AS "cdAllow"
            , a.YN_TAX AS "ynTax"
            , (SELECT s.NM_ALLOW FROM SAALLOW s WHERE s.CD_ALLOW = a.CD_ALLOW AND s.YN_TAX = a.YN_TAX) AS "nmAllow"
            , TO_CHAR(sum(p.ALLOW_PAY)) AS "sumAllowPay"
        FROM SAALLOW a LEFT OUTER JOIN SAALLOWPAY p
            ON a.CD_ALLOW  = p.CD_ALLOW AND a.YN_TAX =p.YN_TAX LEFT OUTER JOIN "DATE" d
            ON p.DATE_ID = d.DATE_ID
            <if test="paymentDateFlag   != null and paymentDateFlag    != ''">
                AND D."DATE" = (SELECT "DATE" FROM "DATE" WHERE date_id = #{dateId})
                <if test="nowFlag       != null and nowFlag     != ''">
                    AND e.DA_RETIRE &lt; (SELECT "DATE" FROM "DATE" WHERE date_id = #{dateId})
                </if>
            </if>
            <if test="allowMonthFlag    != null and allowMonthFlag     != ''">
                AND d."MONTH" = (SELECT "MONTH" FROM "DATE" WHERE date_id = #{dateId})
                <if test="nowFlag       != null and nowFlag     != ''">
                    AND TO_DATE(e.DA_RETIRE, 'YYYY-MM-DD') &lt; TO_DATE((SELECT "MONTH" FROM "DATE" WHERE date_id = #{dateId}), 'YYYY-MM')
                </if>
            </if>
            <if test="allowYearFlag     != null and allowYearFlag      != ''">
                AND d.ALLOW_YEAR = (SELECT "ALLOW_YEAR" FROM "DATE" WHERE date_id = #{dateId})
                <if test="nowFlag       != null and nowFlag     != ''">
                    AND TO_DATE(e.DA_RETIRE, 'YYYY') &lt; TO_DATE((SELECT "ALLOW_YEAR" FROM "DATE" WHERE date_id = #{dateId}), 'YYYY')
                </if>
            </if>
        GROUP BY a.CD_ALLOW, a.YN_TAX
    </select>

    <!--지급일 리스트(코드도움창) -->
    <select id="getPaymentDateList" parameterType="java.util.Map" resultType="hashmap">
        SELECT "DATE" AS "paymentDate" ,  DATE_ID AS "dateId"
            FROM "DATE" d
        WHERE d.ALLOW_YEAR = #{allowYear}
            AND d."MONTH" = #{allowMonth}
    </select>

    <!-- 모달_급여항목등록 급여항목 리스트 -->
    <select id="getsalAllowList" parameterType="java.util.Map" resultType="hashmap">
        SELECT
            CD_ALLOW AS "cdAllow",
            NM_ALLOW AS "nmAllow",
            YN_TAX AS "ynTax",
            SAL_DIVISION AS "salDivison",
            c.CODE_NAME AS "nmSalDivison",
            COMMONLY_YN as "commonlyYn",
            MONTHLY_YN as "monthlyYn"
        FROM SAALLOW a LEFT OUTER JOIN CODE c
            ON c.CODE_ID = a.SAL_DIVISION
        WHERE 1=1
        <if test="salDivison       != null and salDivison     != ''">
            AND SAL_DIVISION = #{salDivison}
        </if>
        ORDER BY COMMONLY_YN
    </select>

    <!-- 모달_비과세 항목 설정 리스트 -->
    <select id="getNonTaxSalAllowList" parameterType="java.util.Map" resultType="hashmap">
        SELECT
            CD_ALLOW as "cdAllow",
            NM_ALLOW as "nmAllow",
            NONTAX_LIMIT as "nonTaxLimit",
            NONTAX_DIVISON as "nonTaxDivison"
        FROM SAALLOW s
        WHERE s.YN_TAX ='N'
    </select>

    <select id="getSalAllowInfo" parameterType="SaAllowPay" resultType="SaAllow">
        SELECT *
        FROM (
        SELECT
            s.CD_ALLOW
            , CASE WHEN i.YN_UNIT = 'Y' AND s.CD_ALLOW = 'OVERTIME_PAY' THEN 'N' ELSE s.YN_TAX END AS YN_TAX
            , s.SAL_DIVISION
            , s.MONTHLY_YN
            , s.COMMONLY_YN
            , s.NONTAX_LIMIT
            , s.NONTAX_DIVISON
            FROM SAALLOW s LEFT OUTER JOIN SAEMPINFO i
                ON i.CD_EMP = #{cdEmp} AND s.CD_ALLOW = #{cdAllow}
            ORDER BY CASE WHEN s.YN_TAX = 'N' THEN 0 ELSE 1 END
        )
        WHERE ROWNUM = 1
    </select>

    <delete id="deleteSalAllowPay" parameterType="SaAllowPay">
        DELETE FROM SAALLOWPAY
        WHERE CD_ALLOW = #{cdAllow}
            AND DATE_ID = #{dateId}
            AND CD_EMP = #{cdEmp}
    </delete>

</mapper>