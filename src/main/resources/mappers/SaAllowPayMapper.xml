<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.douzone.rest.saallowpay.dao.SaAllowPayMapper">

    <!-- 진짜 급여지급액 리스트 -->
    <select id="getSalAlLowPayListByEmp" parameterType="java.util.Map" resultType="SaAllowPay">
        SELECT
            s.CD_ALLOW,
            s.NM_ALLOW,
            SUM(p.ALLOW_PAY) AS ALLOW_PAY
        FROM SAALLOW s LEFT OUTER JOIN (
            SELECT
                CD_EMP,
                CD_ALLOW,
                YN_TAX,
                SUM(ALLOW_PAY) AS "ALLOW_PAY"
            FROM SAALLOWPAY
            WHERE DATE_ID = #{dateId} AND CD_EMP = #{cdEmp}
        <if test="salDivision       != null and salDivision     != ''">
            AND SAL_DIVISION = #{salDivision}
        </if>
        GROUP BY CD_ALLOW, YN_TAX , CD_EMP
        ) p ON p.CD_ALLOW = s.CD_ALLOW
        <if test="salDivision       != null and salDivision     != '' and salDivision != 'SALBONUS'">
            WHERE s.SAL_DIVISION = #{salDivision}
        </if>
        GROUP BY s.CD_ALLOW, s.NM_ALLOW
    </select>

    <!-- 급여지급액 과세 비과세별 합계  -->
    <select id="getSumAllowPayByYnTax" parameterType="java.util.Map" resultType="hashmap">
        SELECT
            DECODE(SUM(CASE WHEN p.YN_TAX = 'Y' THEN ALLOW_PAY ELSE '0' END), NULL, '0', SUM(CASE WHEN p.YN_TAX = 'Y' THEN ALLOW_PAY ELSE '0' END)) AS "sumByY",
            DECODE(SUM(CASE WHEN p.YN_TAX = 'N' THEN ALLOW_PAY ELSE '0' END), NULL, '0', SUM(CASE WHEN p.YN_TAX = 'N' THEN ALLOW_PAY ELSE '0' END)) AS "sumByN",
            DECODE(SUM(ALLOW_PAY), NULL, 0, SUM(ALLOW_PAY)) AS "sumAllowPay"
        FROM SAALLOWPAY p
        LEFT OUTER JOIN SAALLOW s
        ON s.CD_ALLOW = p.CD_ALLOW AND s.YN_TAX = p.YN_TAX
        WHERE 1=1
        <if test="cdEmp     != null and cdEmp   != '' and dateId    != null and dateId  !=''">
            AND p.CD_EMP = #{cdEmp} AND DATE_ID = #{dateId}
        </if>
        <if test="salDivision       != null and salDivision     != ''">
            AND p.SAL_DIVISION = #{salDivision}
        </if>
        AND p.YN_TAX IN ('Y', 'N')
    </select>


    <!-- 계산용 급여지급액 리스트 -->
    <select id="getSalAlLowPayListByEmpForCalculation" parameterType="java.util.Map" resultType="SaAllowPay">
        SELECT a.CD_ALLOW, a.NM_ALLOW, SUM(a.ALLOW_PAY)  AS "ALLOW_PAY", a.CD_EMP
        FROM (
            SELECT
            s.CD_ALLOW,
            s.NM_ALLOW,
            s.YN_TAX,
            p.ALLOW_PAY,
            p.CD_EMP
            FROM SAALLOW s LEFT OUTER JOIN (
            SELECT
            CD_EMP,
            CD_ALLOW,
            YN_TAX,
            SUM(ALLOW_PAY) AS "ALLOW_PAY"
            FROM SAALLOWPAY
            WHERE DATE_ID = #{dateId} AND CD_EMP = #{cdEmp}
            GROUP BY CD_ALLOW, YN_TAX , CD_EMP
        ) p ON p.CD_ALLOW = s.CD_ALLOW AND p.YN_TAX = s.YN_TAX
        <if test="salDivision       != null and salDivision     != ''">
            WHERE s.SAL_DIVISION = #{salDivision}
        </if>
        ) a
        GROUP BY a.CD_ALLOW, a.NM_ALLOW , a.CD_EMP
    </select>



    <!-- 급여지급액 insert or update -->
    <update id="mergeSalAllowPay" parameterType="list">
        MERGE INTO SAALLOWPAY target
        USING (
        <foreach collection="list" item="item" separator="UNION ALL">
            SELECT #{item.cdAllow} AS CD_ALLOW,
            #{item.cdEmp} AS CD_EMP,
            #{item.dateId} AS DATE_ID,
            #{item.allowPay} AS ALLOW_PAY,
            #{item.ynTax} AS YN_TAX,
            #{item.salDivision} AS SAL_DIVISION
            FROM dual

        </foreach>
        ) source
        ON (target.CD_ALLOW = source.CD_ALLOW
        AND target.CD_EMP = source.CD_EMP
        AND target.DATE_ID = source.DATE_ID
        AND target.YN_TAX = source.YN_TAX
        AND target.SAL_DIVISION  = source.SAL_DIVISION
        )
        WHEN MATCHED THEN
        UPDATE SET target.ALLOW_PAY = source.ALLOW_PAY
        WHEN NOT MATCHED THEN
        INSERT (CD_ALLOW, CD_EMP, DATE_ID, ALLOW_PAY , YN_TAX , SAL_DIVISION)
        VALUES (source.CD_ALLOW, source.CD_EMP, source.DATE_ID, source.ALLOW_PAY , source.YN_TAX , source.SAL_DIVISION)
    </update>

    <!-- 지급액 통계 리스트 -->
    <select id="getSalAllowPaySum" parameterType="java.util.Map" resultType="map">
        SELECT
        a.CD_ALLOW AS "cdAllow"
        , a.YN_TAX AS "ynTax"
        , (SELECT s.NM_ALLOW FROM SAALLOW s WHERE s.CD_ALLOW = a.CD_ALLOW AND s.YN_TAX = a.YN_TAX) AS "nmAllow"
        , TO_CHAR(sum(p.ALLOW_PAY)) AS "sumAllowPay"
        FROM SAALLOW a LEFT OUTER JOIN SAALLOWPAY p
        ON a.CD_ALLOW = p.CD_ALLOW AND a.YN_TAX =p.YN_TAX LEFT OUTER JOIN "DATE" d
        ON p.DATE_ID = d.DATE_ID LEFT OUTER JOIN EMP e
        ON p.CD_EMP = e.CD_EMP
        WHERE 1=1
<!--        <if test="salDivision   != null and salDivision    != ''">AND a.SAL_DIVISION = #{salDivision}</if>-->
        <if test="paymentDateFlag ==  'true'">
            AND d."DATE" = #{paymentDate}
            <if test="nowFlag ==  'true'">
                AND (e.DA_RETIRE IS NULL OR e.DA_RETIRE &lt; #{paymentDate})
            </if>
        </if>
        <if test="allowMonthFlag ==  'true'">
            AND d."MONTH" = #{allowMonth}
            <if test="nowFlag ==  'true'">
                AND (e.DA_RETIRE IS NULL OR TO_DATE(e.DA_RETIRE, 'YYYY-MM-DD') &lt; TO_DATE( #{allowMonth}, 'YYYY-MM'))
            </if>
        </if>
        <if test="allowYearFlag  ==  'true'">
            AND d.ALLOW_YEAR = #{allowYear}
            <if test="nowFlag  == 'true'">
                AND (e.DA_RETIRE IS NULL OR TO_DATE(e.DA_RETIRE, 'YYYY') &lt; TO_DATE( #{allowYear}, 'YYYY'))
            </if>
        </if>
        GROUP BY a.CD_ALLOW, a.YN_TAX
        ORDER BY "nmAllow"
    </select>

    <!-- 급여리스트 삭제 -->
    <delete id="deleteSalAllowPay" parameterType="SaAllowPay">
        DELETE FROM SAALLOWPAY
        WHERE CD_ALLOW = #{cdAllow}
        AND DATE_ID = #{dateId}
        AND CD_EMP = #{cdEmp}
        AND SAL_DIVISION = #{salDivision}
    </delete>

    <insert id="insertSalAllowPay" parameterType="SaAllowPay">
        INSERT INTO SAALLOWPAY (CD_DEDUCT, DATE_ID, CD_EMP,  ALLOW_PAY)
        VALUES (#{cdDeduct}, #{dateId}, #{cdEmp}, #{allowPay})
    </insert>

    <update id="updateSalAllowPay" parameterType="SaAllowPay">
        UPDATE SAALLOWPAY
        SET ALLOWPAY = #{allowPay}
        WHERE CD_DEDUCT = #{cdDeduct}
        AND DATE_ID = #{dateId}
        AND CD_EMP = #{cdEmp}
    </update>

    <!-- 지급일 리스트(코드도움창) -->
    <select id="getPaymentDateList" parameterType="java.util.Map" resultType="hashmap">
        SELECT d."DATE" AS "paymentDate"
        , d.ALLOW_YEAR AS "allowYear"
        , d."MONTH" AS "allowMonth"
        , d.DATE_ID AS "dateId"
        , s.SAL_DIVISION AS "salDivision"
        , (SELECT CODE_NAME FROM CODE c WHERE CODE_ID = s.SAL_DIVISION) AS "salDivisionName"
        , DECODE(d.YN_COMPLETE,'Y','완료','') AS "ynComplete"
        FROM "DATE" d LEFT OUTER JOIN SAALLOWPAY p
        ON p.DATE_ID = d.DATE_ID LEFT OUTER JOIN SAALLOW s
        ON p.CD_ALLOW = s.CD_ALLOW
        WHERE 1=1
        AND d.ALLOW_YEAR = #{allowYear}
        <if test="allowMonth  != null and allowMonth   != ''">
            AND d."MONTH" = #{allowMonth}
        </if>
        GROUP BY d."DATE", d.DATE_ID, d."MONTH", d.ALLOW_YEAR, s.SAL_DIVISION, d.YN_COMPLETE
        ORDER BY d."DATE"
    </select>

    <!-- 모달_급여항목등록 급여항목 리스트 -->
    <select id="getsalAllowList" parameterType="java.util.Map" resultType="hashmap">
        SELECT
        CD_ALLOW AS "cdAllow",
        NM_ALLOW AS "nmAllow",
        CASE WHEN YN_TAX = 'Y' THEN YN_TAX ELSE 'N' END AS "ynTax",
        SAL_DIVISION AS "salDivision",
        c.CODE_NAME AS "nmSalDivision",
        COMMONLY_YN as "commonlyYn",
        MONTHLY_YN as "monthlyYn"
        FROM SAALLOW a
        LEFT OUTER JOIN CODE c
        ON c.CODE_ID = a.SAL_DIVISION
        WHERE YN_TAX = 'N'
        OR (YN_TAX = 'Y' AND NOT EXISTS (SELECT 1 FROM SAALLOW b WHERE b.CD_ALLOW = a.CD_ALLOW AND b.YN_TAX = 'N'))
        ORDER BY CD_ALLOW, COMMONLY_YN
    </select>

    <!-- DATE 테이블 완료 여부 수정 -->
    <update id="updateDate" parameterType="java.util.Map">
        UPDATE "DATE" SET YN_COMPLETE = #{ynComplete}
        WHERE DATE_ID = #{dateId}
    </update>

    <!-- 전월데이터 복사 -->
    <insert id="setCopyLastMonthData" parameterType="java.util.Map">
        INSERT INTO SAALLOWPAY (CD_ALLOW, ALLOW_PAY, DATE_ID, YN_TAX)
        SELECT CD_ALLOW
        , ALLOW_PAY
        , CD_EMP
        , GET_DATE_ID( #{allowYear} ,#{allowMonth} ,#{paymentDate}) AS DATE_ID
        , YN_TAX
        FROM SAALLOWPAY s
        WHERE DATE_ID IN (
        SELECT DATE_ID FROM "DATE" d
        WHERE 1=1
        AND ALLOW_YEAR = #{allowYear}
        AND "MONTH"= (SELECT TO_CHAR(TO_DATE(#{allowMonth}, 'YYYY-MM') - INTERVAL '1' MONTH, 'YYYY-MM') FROM DUAL)
        )
    </insert>

    <!-- 지급액 계산_급여항목 정보(과세 분기) -->
    <select id="getSalAllowInfo" parameterType="SaAllowPay" resultType="SaAllow">
        SELECT *
        FROM (
        SELECT
        s.CD_ALLOW
        , CASE WHEN e.YN_UNIT = 'Y' AND s.CD_ALLOW = 'OVERTIME_PAY' THEN 'N' ELSE s.YN_TAX END AS YN_TAX
        , s.SAL_DIVISION
        , s.MONTHLY_YN
        , s.COMMONLY_YN
        , s.NONTAX_LIMIT
        , s.NONTAX_DIVISON
        FROM SAALLOW s LEFT OUTER JOIN EMP e
        ON e.CD_EMP = #{cdEmp}
        WHERE CD_ALLOW = #{cdAllow}
        ORDER BY CASE WHEN s.YN_TAX = 'N' THEN 0 ELSE 1 END
        )
        WHERE ROWNUM = 1
    </select>

    <!-- 지급액 계산_해당 귀속연월 사원의 급여 지급액 정보(한도)-->
    <select id="getSalAllowPaySumByMonth" parameterType="java.util.Map" resultType="Integer">
        SELECT SUM(s.ALLOW_PAY)
        FROM SAALLOWPAY s LEFT OUTER JOIN "DATE" d
        ON s.DATE_ID = d.DATE_ID
        WHERE s.CD_ALLOW = #{cdAllow}
        AND d."MONTH" = #{allowMonth}
        AND s.CD_EMP = #{cdEmp]
        GROUP BY s.CD_ALLOW
    </select>

    <!-- 지급액 계산_해당 지급날짜 사원의 지급액 정보(과세여부)-->
    <select id="getSalAllowPaySumByYnTax" parameterType="java.util.Map" resultType="hashmap">
        SELECT SUM(ALLOW_PAY)
        FROM SAALLOWPAY
        WHERE YN_TAX = #{ynTax}
        AND DATE_ID = #{dateId}
        AND CD_EMP = #{cdEmp}
    </select>

    <!-- dateId 만들기 -->
    <insert id="makeDateId" parameterType="SaAllowPay" useGeneratedKeys="true" keyProperty="dateId" keyColumn="DATE_ID">
        INSERT INTO "DATE" (ALLOW_YEAR, "MONTH", "DATE", DATE_ID)
        VALUES (#{allowYear}, #{allowMonth}, #{paymentDate}, DATE_SEQ.nextval)
    </insert>

    <!-- 전월데이터 복사 DATE_ID 만들기 -->
    <update id="makeOneMonthLaterDateId" parameterType="SaAllowPay">
        MERGE INTO "DATE" target
        USING (
            SELECT
            DISTINCT
            d.ALLOW_YEAR
            , TO_CHAR(ADD_MONTHS(TO_DATE(d."MONTH",'YYYY-MM'),1), 'YYYY-MM') AS "MONTH"
            , TO_CHAR(ADD_MONTHS(TO_DATE(d."DATE",'YYYY-MM-DD'),1), 'YYYY-MM-DD') AS "DATE"
            FROM SAALLOWPAY p LEFT OUTER JOIN "DATE" d
            ON d.DATE_ID = p.DATE_ID
            WHERE p.DATE_ID IN (SELECT DATE_ID FROM "DATE" WHERE "MONTH" = #{allowMonth})
        ) source
        ON (target.ALLOW_YEAR = source.ALLOW_YEAR
        AND target."MONTH" = source."MONTH"
        AND target."DATE" = source."DATE"
        )
        WHEN NOT MATCHED THEN
        INSERT (ALLOW_YEAR, "MONTH", "DATE", DATE_ID)
        VALUES (source.ALLOW_YEAR, source."MONTH", source."DATE", DATE_SEQ.nextval)
    </update>

    <!-- dateId 가져오기 -->
    <select id="getDateId" parameterType="java.util.Map" resultType="string">
        SELECT DATE_ID FROM "DATE"
        WHERE ALLOW_YEAR = #{allowYear} AND "MONTH" = #{allowMonth} AND "DATE" = #{paymentDate}
    </select>

    <!-- 급여항목 지급항목 조회별 합 -->
    <select id="getSalAllowPaySumTaxY" parameterType="SaAllowPay" resultType="hashmap">
        SELECT
        COALESCE(CAST(SUM(CASE WHEN s.SAL_DIVISION = 'SAL' THEN ALLOW_PAY ELSE '0' END) AS INTEGER), 0) AS "sumTaxYBySal",
        COALESCE(CAST(SUM(CASE WHEN s.SAL_DIVISION = 'BONUS' THEN ALLOW_PAY ELSE '0' END) AS INTEGER), 0) AS "sumTaxYByBonus"
        FROM SAALLOWPAY p LEFT OUTER JOIN SAALLOW s
        ON s.CD_ALLOW= p.CD_ALLOW
        WHERE 1=1
        <if test="cdEmp     != null and cdEmp   != '' and dateId    != null and dateId  !=''">
            AND p.CD_EMP = #{cdEmp}
            AND p.DATE_ID IN (SELECT DATE_ID FROM "DATE" WHERE "DATE" IN (SELECT "DATE" FROM "DATE" WHERE DATE_ID =
            #{dateId}))
            AND p.SAL_DIVISION = #{salDivision}
        </if>
        AND s.YN_TAX = 'Y'
    </select>

    <!-- 비과세 급여항목 리스트 -->
    <select id="getNonTaxSalAllowList" parameterType="java.util.Map" resultType="hashmap">
        SELECT
        s.CD_ALLOW as "cdAllow"
        , s.NM_ALLOW as "nmAllow"
        , s.SAL_DIVISION as "salDivision"
        , (SELECT c.CODE_NAME FROM CODE c WHERE c.CODE_ID = s.SAL_DIVISION) as "nonTaxDivison"
        , s.NONTAX_LIMIT as "nontaxLimit"
        FROM SAALLOW s
        WHERE s.YN_TAX = 'N'
    </select>

    <!-- 수당등록 -->
    <insert id="insertSalAllow" parameterType="SaAllow">
        INSERT INTO SAALLOW (CD_ALLOW, NM_ALLOW, YN_TAX, SAL_DIVISION, COMMONLY_YN, MONTHLY_YN)
        VALUES (
            #{cdAllow}, #{nmAllow}, #{ynTax}, #{salDivision}, #{commonlyYn}, #{monthlyYn}
        )
    </insert>

    <select id ="createSallowSeq" resultType="String">
        SELECT TO_CHAR(NVL(MAX(TO_NUMBER(CD_ALLOW))+1, 200)) AS MAX_CD_ALLOW_STR
        FROM SAALLOW
    </select>

    <!-- 수당 수정 -->
    <update id="updateSalAllow" parameterType="SaAllow">
        UPDATE SAALLOW
        <set>
            <if test="nmAllow != null">NM_ALLOW = #{nmAllow},</if>
            <if test="ynTax != null">YN_TAX = #{ynTax},</if>
            <if test="salDivision != null">SAL_DIVISION = #{salDivision},</if>
            <if test="commonlyYn != null">COMMONLY_YN = #{commonlyYn},</if>
            <if test="monthlyYn != null">MONTHLY_YN = #{monthlyYn},</if>
            <if test="nonTaxLimit != null">NONTAX_LIMIT= #{nonTaxLimit},</if>
        </set>
        WHERE CD_ALLOW = #{cdAllow}
        AND YN_TAX = #{originYnTax}
    </update>

    <!-- 수당 삭제 -->
    <delete id="deleteSalAllow" parameterType="SaAllow">
        DELETE FROM SAALLOW
        WHERE CD_ALLOW = #{cdAllow}
        AND YN_TAX = #{ynTax}
    </delete>

    <!-- 비과세 감면설정 한도 update-->
    <update id="updateNonTaxLimit" parameterType="SaAllowPay">
        UPDATE SAALLOW
        SET NONTAX_LIMIT = #{nontaxLimit}
        WHERE CD_ALLOW = #{cdAllow} AND YN_TAX = 'N'
    </update>

    <select id="getSalAllow" parameterType="SaAllow" resultType="SaAllow">
        SELECT YN_TAX
        FROM (
        SELECT
        ROW_NUMBER() OVER (ORDER BY s.YN_TAX) AS rn,
        s.CD_ALLOW,
        YN_TAX
        FROM SAALLOW s
        WHERE CD_ALLOW = #{cdAllow}
        ORDER BY YN_TAX desc
        ) tmp
        WHERE rn = 1
    </select>

</mapper>